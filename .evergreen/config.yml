# Run previous commits to pinpoint a failure's origin.
stepback: true

# Mark failures other than test failures with a purple box.
command_type: system

# Limit maximum test running time.
exec_timeout_secs: 900 # 15 minutes

# What to do when evergreen hits the timeout
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  fetch source:
    - command: git.get_project
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
             CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
             CURRENT_VERSION=latest
          fi
          export PROJECT_DIRECTORY="$(pwd)"
          # Python has cygwin path problems on Windows. Detect prospective mongo-orchestration home directory
          if [ "Windows_NT" = "$OS" ]; then # Magic variable in cygwin
             export PROJECT_DIRECTORY=$(cygpath -m $PROJECT_DIRECTORY)
          fi
          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PREPARE_SHELL: |
             set -o errexit
             set -o xtrace
             export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
             export PROJECT="${project}"
          EOT
          # See what we've done
          cat expansion.yml
    - command: expansions.update
      params:
        file: src/expansion.yml
  run tests:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        args:
          - '.evergreen/run-tests.sh'
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
  run tests ubuntu:
    - command: subprocess.exec
      type: test
      params:
        binary: docker
        working_dir: src
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          PROJECT: ${project}
        args:
          - run
          - '--interactive'
          - '--volume'
          - ${PROJECT_DIRECTORY}:/app
          - '--workdir'
          - /app
          - '--env'
          - PROJECT_DIRECTORY=/app
          - 'ubuntu:16.04'
          - /bin/bash
          - /app/.evergreen/run-tests-ubuntu.sh
  run prebuild:
    - command: subprocess.exec
      type: test
      params:
        working_dir: src
        binary: bash
        args:
          - '.evergreen/run-prebuild.sh'
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}
          NODE_GITHUB_TOKEN: ${github_token}
  run prebuild and force publish:
    - command: shell.exec
      type: test
      params:
        working_dir: src
        script: >
          ${PREPARE_SHELL}
          NODE_FORCE_PUBLISH=1 NODE_GITHUB_TOKEN=${github_token} ${PROJECT_DIRECTORY}/.evergreen/run-prebuild.sh
  install dependencies:
    - command: subprocess.exec
      type: setup
      params:
        working_dir: src
        binary: bash
        args:
          - .evergreen/install-dependencies.sh
        env:
          PROJECT_DIRECTORY: ${PROJECT_DIRECTORY}

pre:
  - func: fetch source

tasks:
  - name: run-tests
    commands:
      - func: install dependencies
      - func: run tests
  - name: run-tests-ubuntu
    commands:
      - func: run tests ubuntu
  - name: run-prebuild
    commands:
      - func: install dependencies
      - func: run prebuild
  - name: run-prebuild-force-publish
    commands:
      - func: install dependencies
      - func: run prebuild and force publish

buildvariants:
  - name: macos
    display_name: 'macOS 10.14'
    run_on: macos-1014
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: macos-m1
    display_name: MacOS M1
    run_on: macos-1100-arm64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: windows-x64
    display_name: 'Windows 2016'
    run_on: windows-64-vs2017-test
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: suse12-s390x
    display_name: 'SLES 12 s390x'
    run_on: suse12-zseries-test
    expansions:
      has_packages: true
      packager_distro: suse12
      packager_arch: s390x
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
  - name: ubuntu1804-64
    display_name: 'Ubuntu 18.04 64-bit'
    run_on: ubuntu1804-test
    expansions:
      has_packages: true
      packager_distro: ubuntu1804
      packager_arch: x86_64
    tasks:
      - run-tests-ubuntu
      - run-prebuild
      - run-prebuild-force-publish
  - name: ubuntu1804-arm64
    display_name: 'Ubuntu 18.04 arm64'
    run_on: ubuntu1804-arm64-build
    expansions:
      has_packages: true
      packager_distro: ubuntu1804
      packager_arch: arm64
    tasks:
      - run-prebuild
      - run-prebuild-force-publish
